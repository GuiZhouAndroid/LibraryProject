//插件管理:
pluginManagement {
    //pluginManagement脚本块中的repositories配置, 对应旧版buildscript中的repositories配置
    //工程构建过程中使用的仓库和依赖
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
//依赖解析管理
dependencyResolutionManagement {
    //RepositoriesMode.PREFER_PROJECT: 解析依赖库时, 优先使用本地仓库, 本地仓库没有该依赖, 则使用远程仓库
    //解析依赖库时, 强行使用远程仓库, 不管本地仓库有没有该依赖库
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    //dependencyResolutionManagement脚本块中的repositories配置, 对应旧版allprojects中的repositories配置 ;
    //所有工程配置的依赖库
    repositories {
        google()
        //maven中央仓库
        mavenCentral()
        jcenter()
        //jitpack
        maven { url "https://jitpack.io" }
        //阿里云效的Maven仓库地址
        maven { url 'https://maven.aliyun.com/repository/public'}
        maven {
            url 'https://packages.aliyun.com/maven/repository/2403080-release-ocjbQ3/'
            credentials {
                username '64c322dd18dc444f20ffb4c9'
                password '53]zpCwjDN-m'
            }
        }
        maven {
            url 'https://packages.aliyun.com/maven/repository/2403080-snapshot-OqTT62/'
            credentials {
                username '64c322dd18dc444f20ffb4c9'
                password '53]zpCwjDN-m'
            }
        }
    }
}
//指定工程根目录，声明后会自动执行该构建脚本
rootProject.name = "LibraryProject"
//指定子项目，声明后会自动执行该构建脚本，例如module名
include ':app'
include ':mvp'
include ':dialog'
include ':network'
include ':swipeback'
include ':utils'
